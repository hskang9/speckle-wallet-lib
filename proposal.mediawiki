---
pip: 1 TODO: need Polkadot Improvement Proposal(PIP) repo
title: Multi-Account Hierarchy for Deterministic Wallets on parachains
author: Hyungsuk Kang(hskang9@gmail.com), TODO: Add reviewers, me with speckle team email
discussions-to: https://github.com/SpeckleOS/speckle-wallet-lib
status: Draft
type: Standards Track
category: Core
created: 2019-04-18
---

==Abstract==


This document introduces Hierarchy deterministic wallet for polkadot/substrate to achieve following benefit:

# Removing neccessity for backup on randomly generated keys in parachain nodes
# Recoverable multi-accounts
# Selective asset sharing by derived accounts from the root

==Motivation==
* token model is hard to manage 
* bip is poorly suited to substrate
* privacy is important



==Related Works==

- BIP 32

BIP 32 describes the idea of deterministic wallets by extended keys using serialized byte array called "path". the path has hierarchy to identify the account for its use cases.

Serialization specifcation is shown below:

- 4 byte: version bytes (mainnet: 0x0488B21E public, 0x0488ADE4 private; testnet: 0x043587CF public, 0x04358394 private)
- 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 derived keys, ....
- 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)
- 4 bytes: child number. This is ser32(i) for i in xi = xpar/i, with xi the key being serialized. (0x00000000 if master key)
- 32 bytes: the chain code
- 33 bytes: the public key or private key data (serP(K) for public keys, 0x00 || ser256(k) for private keys)

Implementation is [https://github.com/cryptocoinjs/hdkey/blob/e2e55694d37441b6a60c49015036525d8315e656/lib/hdkey.js#L219 here]

- BIP 39

Mnemonic phrases are introduced to generate recoverable account which user needs to remember the secret words to regenerate private keys

Implementation [https://github.com/bitcoinjs/bip39/blob/cd6bcdbb2e1c363f72c9e04a4b7dca60b359b092/src/index.js here]

- BIP 44

BIP 44 provides specific use cases on how to implement levels of path to distinguish wallets in different protocol such as examples below:

{|
!coin
!account
!chain
!address
!path
|-
|Bitcoin
|first
|external
|first
|m / 44' / 0' / 0' / 0 / 0
|-
|Bitcoin
|first
|external
|second
|m / 44' / 0' / 0' / 0 / 1
|-
|Bitcoin
|first
|change
|first
|m / 44' / 0' / 0' / 1 / 0
|-
|Bitcoin
|first
|change
|second
|m / 44' / 0' / 0' / 1 / 1
|-
|Bitcoin
|second
|external
|first
|m / 44' / 0' / 1' / 0 / 0
|-
|Bitcoin
|second
|external
|second
|m / 44' / 0' / 1' / 0 / 1
|-
|Bitcoin
|second
|change
|first
|m / 44' / 0' / 1' / 1 / 0
|-
|Bitcoin
|second
|change
|second
|m / 44' / 0' / 1' / 1 / 1
|-
|Bitcoin Testnet
|first
|external
|first
|m / 44' / 1' / 0' / 0 / 0
|-
|Bitcoin Testnet
|first
|external
|second
|m / 44' / 1' / 0' / 0 / 1
|-
|Bitcoin Testnet
|first
|change
|first
|m / 44' / 1' / 0' / 1 / 0
|-
|Bitcoin Testnet
|first
|change
|second
|m / 44' / 1' / 0' / 1 / 1
|-
|Bitcoin Testnet
|second
|external
|first
|m / 44' / 1' / 1' / 0 / 0
|-
|Bitcoin Testnet
|second
|external
|second
|m / 44' / 1' / 1' / 0 / 1
|-
|Bitcoin Testnet
|second
|change
|first
|m / 44' / 1' / 1' / 1 / 0
|-
|Bitcoin Testnet
|second
|change
|second
|m / 44' / 1' / 1' / 1 / 1
|}

- EIP 600

[[https://github.com/Arachnid/EIPs/blob/9ebee88ad531928645b2ebbb944185736c3554bb/eip-600.md proposal]]

- EIP 1102

[[https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md proposal]]

User approved account

- Meta-metamask: Integrating Layer 2 in Metamask for scaling



==Specifcations==

hdkey for the wallet is generated from the seed byte array in this following specification.
<pre>
 version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)
</pre>

- '''version''' is the parachain node version(e.g. Bitcoin(private): 0x0488ADE4, Bitcoin(public): 0x0488B21E )
- '''depth''' is the depth of the wallet family tree.
- '''fingerprint''' is the hash generated from parent hdkey
- '''index''' is the index of the keys in the same depth.
- '''chain''' is the chaincode generated from parsing path levels. 
- '''key''' is the private key
- '''mnemonic''' is a random list of words introduced in BIP39. It is used to recover the account. ' '(spaces) are removed on generation.
- '''passphrase''' is a phrase defined by user to secure their account.
- '''path_level''' is a hierarchy of deterministic wallet that contains account's metadata(e.g. parachain type, index, etc). It is serialzed as described in BIP32.

==Path levels==

We define the following 5 levels to identify interchain account along with mnemonic and password.

<pre>
p / purpose' / coin_type' / account' / address_index
</pre>

Apostrophe in the path indicates that BIP32 hardened derivation is used.

Each level has a special meaning, described in the chapters below.
Compared to BIP44, change is not included since polkadot is not UTXO in default.

====Purpose====
Purpose is a constant set to 01' (or 0x80000001) following the PIP00 recommendation.
It indicates that the subtree of this node is used according to this specification.

====Chain type====
Chain type is an indicator of the use of the parachain protocol. 

====Account====
Account

====Index====
Index is for indexing multiple accounts generated in previous levels.

==Account discovery==
As in BIP44, when the master seed generated by mnemonic discover the accounts in the following manner:

# derive the first account's node (index = 0)  
# derive the external chain node of this account 
# scan addresses of the external chain; respect the gap limit described below  
# if no transactions are found on the external chain, stop discovery 
# if there are some transactions, increase the account index and go to step 1  

==Address gap limit==


==Registered chain types==

==Examples==

==Reference==

- [[https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki|BIP32 - Hierarchical Deterministic Wallets]] 

- [[https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki|BIP43 - Purpose Field for Deterministic Wallets]]  

- [[https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki|BIP44 - Multi-Account Hierarchy for Deterministic Wallets]]  
